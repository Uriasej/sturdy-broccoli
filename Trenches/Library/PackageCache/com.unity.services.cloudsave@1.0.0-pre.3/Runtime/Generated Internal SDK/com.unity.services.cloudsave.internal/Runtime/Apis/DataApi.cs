//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System.Threading.Tasks;
using System.Collections.Generic;
using Unity.Services.CloudSave.Internal.Models;
using Unity.Services.CloudSave.Internal.Http;
using Unity.Services.Authentication.Internal;
using Unity.Services.CloudSave.Internal.Data;

namespace Unity.Services.CloudSave.Internal.Apis.Data
{
    /// <summary>
    /// Interface for the DataApiClient
    /// </summary>
    internal interface IDataApiClient
    {
            /// <summary>
            /// Async Operation.
            /// Delete Item.
            /// </summary>
            /// <param name="request">Request object for DeleteItem.</param>
            /// <param name="operationConfiguration">Configuration for DeleteItem.</param>
            /// <returns>Task for a Response object containing status code, headers.</returns>
            /// <exception cref="Unity.Services.CloudSave.Internal.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response> DeleteItemAsync(DeleteItemRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get Items.
            /// </summary>
            /// <param name="request">Request object for GetItems.</param>
            /// <param name="operationConfiguration">Configuration for GetItems.</param>
            /// <returns>Task for a Response object containing status code, headers, and GetItemsResponse object.</returns>
            /// <exception cref="Unity.Services.CloudSave.Internal.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<GetItemsResponse>> GetItemsAsync(GetItemsRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get Keys.
            /// </summary>
            /// <param name="request">Request object for GetKeys.</param>
            /// <param name="operationConfiguration">Configuration for GetKeys.</param>
            /// <returns>Task for a Response object containing status code, headers, and GetKeysResponse object.</returns>
            /// <exception cref="Unity.Services.CloudSave.Internal.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<GetKeysResponse>> GetKeysAsync(GetKeysRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Set Item.
            /// </summary>
            /// <param name="request">Request object for SetItem.</param>
            /// <param name="operationConfiguration">Configuration for SetItem.</param>
            /// <returns>Task for a Response object containing status code, headers, and SetItemResponse object.</returns>
            /// <exception cref="Unity.Services.CloudSave.Internal.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<SetItemResponse>> SetItemAsync(SetItemRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Set Item Batch.
            /// </summary>
            /// <param name="request">Request object for SetItemBatch.</param>
            /// <param name="operationConfiguration">Configuration for SetItemBatch.</param>
            /// <returns>Task for a Response object containing status code, headers, and SetItemBatchResponse object.</returns>
            /// <exception cref="Unity.Services.CloudSave.Internal.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<SetItemBatchResponse>> SetItemBatchAsync(SetItemBatchRequest request, Configuration operationConfiguration = null);

    }

    ///<inheritdoc cref="IDataApiClient"/>
    internal class DataApiClient : BaseApiClient, IDataApiClient
    {
        private IAccessToken _accessToken;
        private const int _baseTimeout = 10;
        private Configuration _configuration;
        /// <summary>
        /// Accessor for the client configuration object. This returns a merge
        /// between the current configuration and the global configuration to
        /// ensure the correct combination of headers and a base path (if it is
        /// set) are returned.
        /// </summary>
        public Configuration Configuration
        {
            get {
                // We return a merge between the current configuration and the
                // global configuration to ensure we have the correct
                // combination of headers and a base path (if it is set).
                Configuration globalConfiguration = new Configuration("https://cloud-save.services.api.unity.com", 10, 4, null);
                if (CloudSaveService.Instance != null)
                {
                    globalConfiguration = CloudSaveService.Instance.Configuration;
                }
                return Configuration.MergeConfigurations(_configuration, globalConfiguration);
            }
        }
        
        /// <summary>
        /// DataApiClient Constructor.
        /// </summary>
        /// <param name="httpClient">The HttpClient for DataApiClient.</param>
        /// <param name="accessToken">The Authentication token for the client.</param>
        /// <param name="configuration"> DataApiClient Configuration object.</param>
        public DataApiClient(IHttpClient httpClient,
            IAccessToken accessToken,
            Configuration configuration = null) : base(httpClient)
        {
            // We don't need to worry about the configuration being null at
            // this stage, we will check this in the accessor.
            _configuration = configuration;

            _accessToken = accessToken;
        }


        /// <summary>
        /// Async Operation.
        /// Delete Item.
        /// </summary>
        /// <param name="request">Request object for DeleteItem.</param>
        /// <param name="operationConfiguration">Configuration for DeleteItem.</param>
        /// <returns>Task for a Response object containing status code, headers.</returns>
        /// <exception cref="Unity.Services.CloudSave.Internal.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response> DeleteItemAsync(DeleteItemRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200",  null },{"400", typeof(DeleteItem400OneOf)   },{"401", typeof(BasicErrorResponse)   },{"403", typeof(BasicErrorResponse)   },{"409", typeof(ConflictErrorResponse)   },{"429", typeof(BasicErrorResponse)   },{"500", typeof(BasicErrorResponse)   },{"503", typeof(BasicErrorResponse)   } };
            
            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("DELETE",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            ResponseHandler.HandleAsyncResponse(response, statusCodeToTypeMap);
            return new Response(response);
        }


        /// <summary>
        /// Async Operation.
        /// Get Items.
        /// </summary>
        /// <param name="request">Request object for GetItems.</param>
        /// <param name="operationConfiguration">Configuration for GetItems.</param>
        /// <returns>Task for a Response object containing status code, headers, and GetItemsResponse object.</returns>
        /// <exception cref="Unity.Services.CloudSave.Internal.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<GetItemsResponse>> GetItemsAsync(GetItemsRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(GetItemsResponse)   },{"400", typeof(GetItems400OneOf)   },{"401", typeof(BasicErrorResponse)   },{"403", typeof(BasicErrorResponse)   },{"404", typeof(BasicErrorResponse)   },{"429", typeof(BasicErrorResponse)   },{"500", typeof(BasicErrorResponse)   },{"503", typeof(BasicErrorResponse)   } };
            
            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<GetItemsResponse>(response, statusCodeToTypeMap);
            return new Response<GetItemsResponse>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get Keys.
        /// </summary>
        /// <param name="request">Request object for GetKeys.</param>
        /// <param name="operationConfiguration">Configuration for GetKeys.</param>
        /// <returns>Task for a Response object containing status code, headers, and GetKeysResponse object.</returns>
        /// <exception cref="Unity.Services.CloudSave.Internal.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<GetKeysResponse>> GetKeysAsync(GetKeysRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(GetKeysResponse)   },{"400", typeof(GetKeys400OneOf)   },{"401", typeof(BasicErrorResponse)   },{"403", typeof(BasicErrorResponse)   },{"404", typeof(BasicErrorResponse)   },{"429", typeof(BasicErrorResponse)   },{"500", typeof(BasicErrorResponse)   },{"503", typeof(BasicErrorResponse)   } };
            
            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<GetKeysResponse>(response, statusCodeToTypeMap);
            return new Response<GetKeysResponse>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Set Item.
        /// </summary>
        /// <param name="request">Request object for SetItem.</param>
        /// <param name="operationConfiguration">Configuration for SetItem.</param>
        /// <returns>Task for a Response object containing status code, headers, and SetItemResponse object.</returns>
        /// <exception cref="Unity.Services.CloudSave.Internal.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<SetItemResponse>> SetItemAsync(SetItemRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(SetItemResponse)   },{"400", typeof(SetItem400OneOf)   },{"401", typeof(BasicErrorResponse)   },{"403", typeof(BasicErrorResponse)   },{"409", typeof(ConflictErrorResponse)   },{"429", typeof(BasicErrorResponse)   },{"500", typeof(BasicErrorResponse)   },{"503", typeof(BasicErrorResponse)   } };
            
            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<SetItemResponse>(response, statusCodeToTypeMap);
            return new Response<SetItemResponse>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Set Item Batch.
        /// </summary>
        /// <param name="request">Request object for SetItemBatch.</param>
        /// <param name="operationConfiguration">Configuration for SetItemBatch.</param>
        /// <returns>Task for a Response object containing status code, headers, and SetItemBatchResponse object.</returns>
        /// <exception cref="Unity.Services.CloudSave.Internal.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<SetItemBatchResponse>> SetItemBatchAsync(SetItemBatchRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(SetItemBatchResponse)   },{"400", typeof(SetItemBatch400OneOf)   },{"401", typeof(BasicErrorResponse)   },{"403", typeof(BasicErrorResponse)   },{"409", typeof(BatchConflictErrorResponse)   },{"429", typeof(BasicErrorResponse)   },{"500", typeof(BasicErrorResponse)   },{"503", typeof(BasicErrorResponse)   } };
            
            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<SetItemBatchResponse>(response, statusCodeToTypeMap);
            return new Response<SetItemBatchResponse>(response, handledResponse);
        }

    }
}
