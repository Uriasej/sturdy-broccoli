//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System.Threading.Tasks;
using System.Collections.Generic;
using Unity.Services.Economy.Internal.Models;
using Unity.Services.Economy.Internal.Http;
using Unity.Services.Economy.Internal.Inventory;

namespace Unity.Services.Economy.Internal.Apis.Inventory
{
    /// <summary>
    /// Interface for the InventoryApiClient
    /// </summary>
    internal interface IInventoryApiClient
    {
            /// <summary>
            /// Async Operation.
            /// Add Inventory Item.
            /// </summary>
            /// <param name="request">Request object for AddInventoryItem.</param>
            /// <param name="operationConfiguration">Configuration for AddInventoryItem.</param>
            /// <returns>Task for a Response object containing status code, headers, and InventoryResponse object.</returns>
            /// <exception cref="Unity.Services.Economy.Internal.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<InventoryResponse>> AddInventoryItemAsync(AddInventoryItemRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Delete Inventory Item.
            /// </summary>
            /// <param name="request">Request object for DeleteInventoryItem.</param>
            /// <param name="operationConfiguration">Configuration for DeleteInventoryItem.</param>
            /// <returns>Task for a Response object containing status code, headers.</returns>
            /// <exception cref="Unity.Services.Economy.Internal.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response> DeleteInventoryItemAsync(DeleteInventoryItemRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// List Player Inventory.
            /// </summary>
            /// <param name="request">Request object for GetPlayerInventory.</param>
            /// <param name="operationConfiguration">Configuration for GetPlayerInventory.</param>
            /// <returns>Task for a Response object containing status code, headers, and PlayerInventoryResponse object.</returns>
            /// <exception cref="Unity.Services.Economy.Internal.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<PlayerInventoryResponse>> GetPlayerInventoryAsync(GetPlayerInventoryRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Player Inventory Item.
            /// </summary>
            /// <param name="request">Request object for UpdateInventoryItem.</param>
            /// <param name="operationConfiguration">Configuration for UpdateInventoryItem.</param>
            /// <returns>Task for a Response object containing status code, headers, and InventoryResponse object.</returns>
            /// <exception cref="Unity.Services.Economy.Internal.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<InventoryResponse>> UpdateInventoryItemAsync(UpdateInventoryItemRequest request, Configuration operationConfiguration = null);

    }

    ///<inheritdoc cref="IInventoryApiClient"/>
    internal class InventoryApiClient : BaseApiClient, IInventoryApiClient
    {
        private const int _baseTimeout = 10;
        private Configuration _configuration;
        /// <summary>
        /// Accessor for the client configuration object. This returns a merge
        /// between the current configuration and the global configuration to
        /// ensure the correct combination of headers and a base path (if it is
        /// set) are returned.
        /// </summary>
        public Configuration Configuration
        {
            get {
                // We return a merge between the current configuration and the
                // global configuration to ensure we have the correct
                // combination of headers and a base path (if it is set).
                Configuration globalConfiguration = new Configuration("https://economy.services.api.unity.com", 10, 4, null);
                if (EconomyService.Instance != null)
                {
                    globalConfiguration = EconomyService.Instance.Configuration;
                }
                return Configuration.MergeConfigurations(_configuration, globalConfiguration);
            }
        }
        
        /// <summary>
        /// InventoryApiClient Constructor.
        /// </summary>
        /// <param name="httpClient">The HttpClient for InventoryApiClient.</param>
        
        /// <param name="configuration"> InventoryApiClient Configuration object.</param>
        public InventoryApiClient(IHttpClient httpClient,
            Configuration configuration = null) : base(httpClient)
        {
            // We don't need to worry about the configuration being null at
            // this stage, we will check this in the accessor.
            _configuration = configuration;

            
        }


        /// <summary>
        /// Async Operation.
        /// Add Inventory Item.
        /// </summary>
        /// <param name="request">Request object for AddInventoryItem.</param>
        /// <param name="operationConfiguration">Configuration for AddInventoryItem.</param>
        /// <returns>Task for a Response object containing status code, headers, and InventoryResponse object.</returns>
        /// <exception cref="Unity.Services.Economy.Internal.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<InventoryResponse>> AddInventoryItemAsync(AddInventoryItemRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(InventoryResponse)   },{"400", typeof(MakeVirtualPurchase400OneOf)   },{"403", typeof(BasicErrorResponse)   },{"404", typeof(BasicErrorResponse)   },{"409", typeof(ErrorResponseConflictInventory)   },{"422", typeof(BasicErrorResponse)   },{"429", typeof(BasicErrorResponse)   },{"503", typeof(BasicErrorResponse)   } };
            
            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<InventoryResponse>(response, statusCodeToTypeMap);
            return new Response<InventoryResponse>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Delete Inventory Item.
        /// </summary>
        /// <param name="request">Request object for DeleteInventoryItem.</param>
        /// <param name="operationConfiguration">Configuration for DeleteInventoryItem.</param>
        /// <returns>Task for a Response object containing status code, headers.</returns>
        /// <exception cref="Unity.Services.Economy.Internal.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response> DeleteInventoryItemAsync(DeleteInventoryItemRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200",  null },{"400", typeof(MakeVirtualPurchase400OneOf)   },{"403", typeof(BasicErrorResponse)   },{"404", typeof(BasicErrorResponse)   },{"409", typeof(ErrorResponseConflictInventoryDelete)   },{"429", typeof(BasicErrorResponse)   },{"503", typeof(BasicErrorResponse)   } };
            
            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("DELETE",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            ResponseHandler.HandleAsyncResponse(response, statusCodeToTypeMap);
            return new Response(response);
        }


        /// <summary>
        /// Async Operation.
        /// List Player Inventory.
        /// </summary>
        /// <param name="request">Request object for GetPlayerInventory.</param>
        /// <param name="operationConfiguration">Configuration for GetPlayerInventory.</param>
        /// <returns>Task for a Response object containing status code, headers, and PlayerInventoryResponse object.</returns>
        /// <exception cref="Unity.Services.Economy.Internal.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<PlayerInventoryResponse>> GetPlayerInventoryAsync(GetPlayerInventoryRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(PlayerInventoryResponse)   },{"403", typeof(BasicErrorResponse)   },{"404", typeof(BasicErrorResponse)   },{"429", typeof(BasicErrorResponse)   },{"503", typeof(BasicErrorResponse)   } };
            
            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<PlayerInventoryResponse>(response, statusCodeToTypeMap);
            return new Response<PlayerInventoryResponse>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Player Inventory Item.
        /// </summary>
        /// <param name="request">Request object for UpdateInventoryItem.</param>
        /// <param name="operationConfiguration">Configuration for UpdateInventoryItem.</param>
        /// <returns>Task for a Response object containing status code, headers, and InventoryResponse object.</returns>
        /// <exception cref="Unity.Services.Economy.Internal.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<InventoryResponse>> UpdateInventoryItemAsync(UpdateInventoryItemRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(InventoryResponse)   },{"400", typeof(MakeVirtualPurchase400OneOf)   },{"403", typeof(BasicErrorResponse)   },{"404", typeof(BasicErrorResponse)   },{"409", typeof(ErrorResponseConflictInventoryUpdate)   },{"429", typeof(BasicErrorResponse)   },{"503", typeof(BasicErrorResponse)   } };
            
            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("PUT",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<InventoryResponse>(response, statusCodeToTypeMap);
            return new Response<InventoryResponse>(response, handledResponse);
        }

    }
}
