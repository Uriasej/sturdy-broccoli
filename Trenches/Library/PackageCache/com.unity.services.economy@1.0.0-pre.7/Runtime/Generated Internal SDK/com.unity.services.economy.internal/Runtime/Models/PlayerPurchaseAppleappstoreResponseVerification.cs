//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Economy.Internal.Http;



namespace Unity.Services.Economy.Internal.Models
{
    /// <summary>
    /// PlayerPurchaseAppleappstoreResponseVerification model
    /// <param name="status">Status of the receipt verification. VALID: The purchase was valid. VALID_NOT_REDEEMED: The purchase was valid but seen before, but had not yet been redeemed. INVALID_ALREADY_REDEEMED: The purchase has already been redeemed. INVALID_VERIFICATION_FAILED: The receipt verification Service returned that the receipt data was not valid. INVALID_ANOTHER_PLAYER: The receipt has previously been used by a different player and validated. INVALID_CONFIGURATION: The service configuration is invalid, further information in the details section of the response. INVALID_PRODUCT_ID_MISMATCH: The purchase configuration store product identifier does not match the one in the receipt.</param>
    /// <param name="store">store param</param>
    /// </summary>

    [Preserve]
    [DataContract(Name = "player_purchase_appleappstore_response_verification")]
    internal class PlayerPurchaseAppleappstoreResponseVerification
    {
        /// <summary>
        /// Creates an instance of PlayerPurchaseAppleappstoreResponseVerification.
        /// </summary>
        /// <param name="status">Status of the receipt verification. VALID: The purchase was valid. VALID_NOT_REDEEMED: The purchase was valid but seen before, but had not yet been redeemed. INVALID_ALREADY_REDEEMED: The purchase has already been redeemed. INVALID_VERIFICATION_FAILED: The receipt verification Service returned that the receipt data was not valid. INVALID_ANOTHER_PLAYER: The receipt has previously been used by a different player and validated. INVALID_CONFIGURATION: The service configuration is invalid, further information in the details section of the response. INVALID_PRODUCT_ID_MISMATCH: The purchase configuration store product identifier does not match the one in the receipt.</param>
        /// <param name="store">store param</param>
        [Preserve]
        public PlayerPurchaseAppleappstoreResponseVerification(StatusOptions status, PlayerPurchaseAppleappstoreResponseVerificationStore store)
        {
            Status = status;
            Store = store;
        }

        /// <summary>
        /// Status of the receipt verification. VALID: The purchase was valid. VALID_NOT_REDEEMED: The purchase was valid but seen before, but had not yet been redeemed. INVALID_ALREADY_REDEEMED: The purchase has already been redeemed. INVALID_VERIFICATION_FAILED: The receipt verification Service returned that the receipt data was not valid. INVALID_ANOTHER_PLAYER: The receipt has previously been used by a different player and validated. INVALID_CONFIGURATION: The service configuration is invalid, further information in the details section of the response. INVALID_PRODUCT_ID_MISMATCH: The purchase configuration store product identifier does not match the one in the receipt.
        /// </summary>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public StatusOptions Status{ get; }
        /// <summary>
        /// 
        /// </summary>
        [Preserve]
        [DataMember(Name = "store", IsRequired = true, EmitDefaultValue = true)]
        public PlayerPurchaseAppleappstoreResponseVerificationStore Store{ get; }
    

        /// <summary>
        /// Status of the receipt verification. VALID: The purchase was valid. VALID_NOT_REDEEMED: The purchase was valid but seen before, but had not yet been redeemed. INVALID_ALREADY_REDEEMED: The purchase has already been redeemed. INVALID_VERIFICATION_FAILED: The receipt verification Service returned that the receipt data was not valid. INVALID_ANOTHER_PLAYER: The receipt has previously been used by a different player and validated. INVALID_CONFIGURATION: The service configuration is invalid, further information in the details section of the response. INVALID_PRODUCT_ID_MISMATCH: The purchase configuration store product identifier does not match the one in the receipt.
        /// </summary>
        /// <value>Status of the receipt verification. VALID: The purchase was valid. VALID_NOT_REDEEMED: The purchase was valid but seen before, but had not yet been redeemed. INVALID_ALREADY_REDEEMED: The purchase has already been redeemed. INVALID_VERIFICATION_FAILED: The receipt verification Service returned that the receipt data was not valid. INVALID_ANOTHER_PLAYER: The receipt has previously been used by a different player and validated. INVALID_CONFIGURATION: The service configuration is invalid, further information in the details section of the response. INVALID_PRODUCT_ID_MISMATCH: The purchase configuration store product identifier does not match the one in the receipt.</value>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusOptions
        {
            /// <summary>
            /// Enum VALID for value: VALID
            /// </summary>
            [EnumMember(Value = "VALID")]
            VALID = 1,

            /// <summary>
            /// Enum VALIDNOTREDEEMED for value: VALID_NOT_REDEEMED
            /// </summary>
            [EnumMember(Value = "VALID_NOT_REDEEMED")]
            VALIDNOTREDEEMED = 2,

            /// <summary>
            /// Enum INVALIDALREADYREDEEMED for value: INVALID_ALREADY_REDEEMED
            /// </summary>
            [EnumMember(Value = "INVALID_ALREADY_REDEEMED")]
            INVALIDALREADYREDEEMED = 3,

            /// <summary>
            /// Enum INVALIDVERIFICATIONFAILED for value: INVALID_VERIFICATION_FAILED
            /// </summary>
            [EnumMember(Value = "INVALID_VERIFICATION_FAILED")]
            INVALIDVERIFICATIONFAILED = 4,

            /// <summary>
            /// Enum INVALIDANOTHERPLAYER for value: INVALID_ANOTHER_PLAYER
            /// </summary>
            [EnumMember(Value = "INVALID_ANOTHER_PLAYER")]
            INVALIDANOTHERPLAYER = 5,

            /// <summary>
            /// Enum INVALIDCONFIGURATION for value: INVALID_CONFIGURATION
            /// </summary>
            [EnumMember(Value = "INVALID_CONFIGURATION")]
            INVALIDCONFIGURATION = 6,

            /// <summary>
            /// Enum INVALIDPRODUCTIDMISMATCH for value: INVALID_PRODUCT_ID_MISMATCH
            /// </summary>
            [EnumMember(Value = "INVALID_PRODUCT_ID_MISMATCH")]
            INVALIDPRODUCTIDMISMATCH = 7

        }

    }
}

